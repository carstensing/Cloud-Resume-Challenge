
[{"content":"","date":"Jan 22, 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":" Carsten Singleton # Skills # Python │ Linux │ Cloud (AWS) │ GitHub │ C/C++ │ IaC\nTeam Collaboration │ Verbal \u0026amp; Written Communication │ Reliability \u0026amp; Diligence │ Continuous Learning\nEducation # UC San Diego — B.S. Computer Science │ GPA: 3.63 │ Sep 2019 - Mar 2022\nMiraCosta College — A.A. Math and Science │ GPA: 3.96 │ Jan 2017 - Jul 2019\nWork Experience # Public Health COVID-19 Compliance Coordinator # University of California San Diego — Feb 2022 - Jun 2023\nDeveloped a Python script to automate the maintenance of the Potential Exposure Locations table in UCSD\u0026quot;s COVID-19 Daily Dashboard, improving data consistency and readability, and cutting task time from several hours to a few minutes, which saved four hours each week.\nCollaborated with UCSD teams such as the Emergency Operations Center (EOC), Facilities Management (FM), Housing, Dining and Hospitality, and Transportation, as well as local hotels, to manage the safe and efficient transport of COVID-positive students to isolation housing, minimizing contagion and ensuring continuity of in-person instruction for over 40,000 students.\nSupported the Contact Tracing team, EOC, and FM by analyzing data and relaying health, safety, and employment benefits information to supervisors and employees, helping to minimize exposure and outbreaks while ensuring compliance with Cal/OSHA regulations.\nMath Tutor # MiraCosta College — Aug 2018 - May 2019\nProvided one-on-one and group tutoring sessions in various math subjects including algebra, trigonometry, and calculus, helping students improve their understanding and academic performance.\nPromoted a collaborative learning environment by encouraging open discussion and feedback, helping students build confidence and gain a deeper grasp of difficult mathematical concepts.\nAdapted and personalized teaching methods to address individual students\u0026quot; learning needs, tailoring instructional approaches to effectively support varying levels of proficiency and learning styles.\nStudent Ambassador # MiraCosta College — Aug 2017 - Jun 2018\nRepresented MiraCosta College as a Student Ambassador by visiting local schools, engaging with prospective students, and providing comprehensive information about programs and services, significantly boosting student interest and applications.\nFacilitated the application and enrollment process for prospective students including underrepresented groups, contributing to a notable increase in overall enrollment and diversity.\nConducted weekly on-site peer counseling sessions at assigned high schools, guiding students through the admissions process and offering pre-enrollment advising to ensure a smooth transition to college.\nProjects # Cloud Resume Challenge (Current) # Skills: Python, Hugo, AWS (Organizations, IAM, S3, Route53, CloudFront, API Gateway, Lambda, DynamoDB), Terraform, PyTest\nResume website built on AWS S3 \u0026amp; CloudFront that is integrated with DynamoDB via API Gateway and Lambda.\nCurrently working on IaC with Terraform and automated testing with PyTest.\nIntro to Computer Architecture: Custom CPU # Skills: SystemVerilog, Python, CPU architecture \u0026amp; low-level programming language design\nDesigned a custom CPU architecture, instruction set, and compiler that implements a Linear Feedback Shift Register encryption and decryption algorithm. Potential Exposure Location Date Updater # Skills: Python, unittest, automation\nDeveloped a Python script with unittests to automate maintenance of UCSD\u0026quot;s Potential Exposure Locations table. Arduino Well Pump Controller # Skills: Arduino, electronics, automation\nEngineered an Arduino controller that automates pumping well water for irrigation use. Certificates # PCEP - Certified Entry-Level Python Programmer — Feb 2024\nAWS - Certified Cloud Practitioner — Oct 2024 - Oct 2027\n","date":"Jan 22, 2025","externalUrl":null,"permalink":"/posts/resume/","section":"Posts","summary":"Seeking employment in tech.","title":"Resume","type":"posts"},{"content":"Welcome to my website! I'm really happy you stopped by.\n","date":"Jan 22, 2025","externalUrl":null,"permalink":"/","section":"Welcome to Blowfish!","summary":"Welcome to my website!","title":"Welcome to Blowfish!","type":"page"},{"content":"The Cloud Resume Challenge is a multi-step project designed to help aspiring cloud developers gain real-world experience with cloud technologies by building and deploying a personal resume website.\nThis repo showcases my journey through the challenge and what I learned along the way.\nCheck out my website at carsten-singleton.com.\nIntroduction # Why Learn Cloud # The entry-level job market for roles in software development and IT operations are oversaturated and highly competitive. Traditional education often lacks cloud-specific training, resulting in a shortage of skilled engineers. As more companies depend on cloud services for critical business operations, the demand for jobs outweighs the supply of trained engineers.\nFortunately, cloud engineering is accessible to those without a degree, thanks to numerous certifications and online learning resources. Engineers gain experience in system administration, networking, security, automation, and programming, building a diverse set of highly transferable skills. Additionally, cloud engineering offers competitive salaries, remote work opportunities, and significant potential for career growth.\nThese factors are especially attractive to me, as they support my long-term goal of becoming a DevOps Engineer.\nWhat is the Cloud Resume Challenge # The Cloud Resume Challenge, by Forrest Brazeal, is a project outline that simulates end-to-end cloud development—culminating in a personal resume website. The challenge provides hands-on experience with cloud technologies and serves as a portfolio piece for job seekers in the field. Any cloud service provider can be used to complete this challenge. I chose Amazon Web Services.\nThis is the general outline:\nCertification: Obtain a cloud certification (AWS Certified Cloud Practitioner).\nFrontend: Create a static website (HTML, CSS, JavaScript) and host it using a cloud provider (S3, Route53, Cloudfront).\nBackend: Implement a visitor counter using a serverless function and a database (Lambda, DynamoDB, API Gateway).\nInfrastructure as Code (IaC): Automate deployments with tools like Terraform or AWS CloudFormation.\nCI/CD: Set up automated testing (PyTest, PlayWright) and deployment pipelines (GitHub Actions).\nForrest Brazeal has a project guide that details the best ways to go about the challenge and includes additional modifications for even more hand-on practice. I used\nhttps://cloudresumechallenge.dev/book/\nSteps I Took # AWS Certification # Without any prior cloud experience the project guide was difficult to understand. As I studied for the AWS Certified Cloud Practitioner exam, I learned about vital cloud concepts and the specific services used in the project.\nI spent over 60 hours watching lectures, reading, and answering over 1900 practice problems. Make sure your study material is up to date with the current exam version and outline. I studied old material which set me back some time.\nAfter completing this project, I intend on obtaining the AWS Certified Solutions Architect certification as well.\nFree resources that I used to pass the exam (Oct 2024):\nAndrew Brown\u0026rsquo;s lecture videos Sthithapragna\u0026rsquo;s practice questions Hugo Static Site # I wanted to create a website that I could use for more than my resume. Something simple that worked with Markdown so I could reuse my repository READMEs. My search lead me to a static website framework called Hugo. Hugo builds and serves the site to a localhost, providing a real-time preview of the site. This is super handy for developing locally before moving onto hosting with AWS. Overall, I\u0026rsquo;m happy that I chose to use Hugo over building a basic HTML and CSS static site that I would dread updating.\nFree Resources to learn Hugo:\nHugo documentation Giraffe Academy AWS Organizations # AWS Organizations is a centralized account management service that helps businesses manage multiple AWS accounts efficiently. It provides security, governance, cost optimization, and automation at scale.\nWhat is AWS Organizations? Terminology and concepts for AWS Organizations Okay great, but why did I use it for a single-person project? Besides to get some hands-on experience, here is what I found:\nAccount Protection # Using the AWS root account for development is a bad practice due to its unlimited privileges, making it prone to accidental misconfigurations or deletions that cannot be restricted by IAM policies. It also poses a significant security risk since a compromised root account grants full control over all AWS resources. This can cost thousands of dollars! So to protect yourself from yourself and attackers, develop in a member account, not root.\nIAM Roles and Policies # Member accounts have their permissions set by root. I gave my dev account PowerUserAccess, which grants full access to AWS services and resources, but does not allow management of Users and groups. Sounds like that should be all I need to code some stuff right? Nope! Thanks to IAM roles and policies.\nRoles are like logos that are assigned to users, groups, or services, representing their identity and the level of access they have. Policies are the specific permissions that are attached to a role (or directly to a user or group), defining what actions they can perform.\nImagine a facility with different levels of security. They hire a cleaning company, and anyone with the company logo (role) on their uniform or vehicle is allowed on-site. However, the cleaning crew doesn\u0026rsquo;t have access to the fourth floor of the building. The role is the cleaning company\u0026rsquo;s logo, and the policy is the restriction that they cannot go to the fourth floor.\nThe company\u0026rsquo;s vehicle (which could be used for drop-offs) also has the logo and can enter the premises. However, not just anyone can drive the vehicle; only authorized drivers (users with the correct role) can use it. The driver assumes the role associated with the vehicle and is granted access based on the permissions attached to that role. This is an example of a service role that can be assumed by users to gain temporary access to resources they otherwise wouldn\u0026rsquo;t have.\nAs I moved from one service to another, I found what permissions I was lacking. Following the principle of least privilege, I added only the permissions required for each specific task. This incremental approach helped me learn how services use IAM roles and policies, and how they impact development on AWS.\nFree Tier # The hack to creating member accounts is to use email sub-addressing instead of creating a new email. For example, if the root email is myemail@mail.com, the dev account can be created with myemail+dev@mail.com. Even if the root account is no longer eligible for the Free Tier, the member accounts are eligible because they are newly created. After a year, when the dev account loses Free Tier eligibility, simply create another dev account with a different sub-address. Infinite Free Tier!\nBe aware that even with multiple Free Tier accounts within an organization, the benefits don\u0026rsquo;t increase. As long as one or more accounts are Free Tier eligible, the entire organization will share the standard Free Tier benefits.\nAWS Free Tier FAQs SSO Login # To use the AWS Command Line Interface (CLI) locally, account credentials (access keys) must be stored on your computer. However, this poses a significant security risk, since they can accidentally be published to platforms like GitHub. The IAM Identity Center for AWS Organizations provides single sign-on (SSO) access with credentials that expire. These temporary credentials reduce the risk of leaked keys compromising an account. Plus, sso login is very convenient to use, even from the CLI.\nSSO setup guide for personal development To avoid frequent logins, set the session duration to more than an hour.\nS3, HTTPS and DNS # I purchased a domain name through Route 53 and created an S3 bucket to store my website files built by Hugo. Make sure the hosted zone\u0026rsquo;s name servers match where traffic is being routed. I spent a lot of time trying to figure out why DNS wasn\u0026rsquo;t working because of this. After that, I used CloudFront to enable HTTPS. AWS has tutorials on how to do all of this, which made it very easy.\nLearning Resources:\nConfiguring a static site using a custom domain registered with Route 53\nCloudFront and HTTPS\nAWS CLI # TODO\nDynamoDB, Lambda, API Gateway and JavaScript # I learned a ton on this chuck of the project. I understood the concept of how a website, a database and an API interacted, but actually building it all really challenged me.\nTODO\nTests # TODO\nTerraform # TODO\nSource Control # TODO\nTechnology learned # AWS CLI Hugo PyTest PlayWright for Python Terraform Technology Used # Git Github VSCode Ubuntu Firefox Developer Tools ","date":"Oct 17, 2024","externalUrl":null,"permalink":"/posts/cloud_resume_challenge/","section":"Posts","summary":"A work in progress.","title":"Cloud Resume Challenge [Draft]","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]